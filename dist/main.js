(()=>{"use strict";const t={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function e(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const n={date:e({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:e({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:e({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},r={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function a(t){return(e,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,a=n?.width?String(n.width):e;r=t.formattingValues[a]||t.formattingValues[e]}else{const e=t.defaultWidth,a=n?.width?String(n.width):t.defaultWidth;r=t.values[a]||t.values[e]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function o(t){return(e,n={})=>{const r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;const i=o[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}var i;const s={code:"en-US",formatDistance:(e,n,r)=>{let a;const o=t[e];return a="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),r?.addSuffix?r.comparison&&r.comparison>0?"in "+a:a+" ago":a},formatLong:n,formatRelative:(t,e,n,a)=>r[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:a({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:a({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:a({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:a({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:a({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(i={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(i.matchPattern);if(!n)return null;const r=n[0],a=t.match(i.parsePattern);if(!a)return null;let o=i.valueCallback?i.valueCallback(a[0]):a[0];return o=e.valueCallback?e.valueCallback(o):o,{value:o,rest:t.slice(r.length)}}),era:o({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:o({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:o({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:o({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:o({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let c={};function d(){return c}Math.pow(10,8);const l=6048e5,u=864e5;function h(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function m(t){const e=h(t);return e.setHours(0,0,0,0),e}function g(t){const e=h(t),n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),+t-+n}function f(t,e){const n=m(t),r=m(e),a=+n-g(n),o=+r-g(r);return Math.round((a-o)/u)}function p(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function y(t){const e=h(t);return f(e,function(t){const e=h(t),n=p(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function w(t,e){const n=d(),r=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=h(t),o=a.getDay(),i=(o<r?7:0)+o-r;return a.setDate(a.getDate()-i),a.setHours(0,0,0,0),a}function k(t){return w(t,{weekStartsOn:1})}function b(t){const e=h(t),n=e.getFullYear(),r=p(t,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const a=k(r),o=p(t,0);o.setFullYear(n,0,4),o.setHours(0,0,0,0);const i=k(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function v(t){const e=h(t),n=+k(e)-+function(t){const e=b(t),n=p(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),k(n)}(e);return Math.round(n/l)+1}function x(t,e){const n=h(t),r=n.getFullYear(),a=d(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,i=p(t,0);i.setFullYear(r+1,0,o),i.setHours(0,0,0,0);const s=w(i,e),c=p(t,0);c.setFullYear(r,0,o),c.setHours(0,0,0,0);const l=w(c,e);return n.getTime()>=s.getTime()?r+1:n.getTime()>=l.getTime()?r:r-1}function S(t,e){const n=h(t),r=+w(n,e)-+function(t,e){const n=d(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=x(t,e),o=p(t,0);return o.setFullYear(a,0,r),o.setHours(0,0,0,0),w(o,e)}(n,e);return Math.round(r/l)+1}function D(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const M={y(t,e){const n=t.getFullYear(),r=n>0?n:1-n;return D("yy"===e?r%100:r,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):D(n+1,2)},d:(t,e)=>D(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>D(t.getHours()%12||12,e.length),H:(t,e)=>D(t.getHours(),e.length),m:(t,e)=>D(t.getMinutes(),e.length),s:(t,e)=>D(t.getSeconds(),e.length),S(t,e){const n=e.length,r=t.getMilliseconds();return D(Math.trunc(r*Math.pow(10,n-3)),e.length)}},j={G:function(t,e,n){const r=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),r=e>0?e:1-e;return n.ordinalNumber(r,{unit:"year"})}return M.y(t,e)},Y:function(t,e,n,r){const a=x(t,r),o=a>0?a:1-a;return"YY"===e?D(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):D(o,e.length)},R:function(t,e){return D(b(t),e.length)},u:function(t,e){return D(t.getFullYear(),e.length)},Q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return D(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){const r=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return D(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){const r=t.getMonth();switch(e){case"M":case"MM":return M.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){const r=t.getMonth();switch(e){case"L":return String(r+1);case"LL":return D(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){const a=S(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):D(a,e.length)},I:function(t,e,n){const r=v(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):D(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):M.d(t,e)},D:function(t,e,n){const r=y(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):D(r,e.length)},E:function(t,e,n){const r=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){const a=t.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return D(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){const a=t.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return D(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){const r=t.getDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return D(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){const r=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){const r=t.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){const r=t.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return M.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):M.H(t,e)},K:function(t,e,n){const r=t.getHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):D(r,e.length)},k:function(t,e,n){let r=t.getHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):D(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):M.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):M.s(t,e)},S:function(t,e){return M.S(t,e)},X:function(t,e,n){const r=t.getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return T(r);case"XXXX":case"XX":return P(r);default:return P(r,":")}},x:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"x":return T(r);case"xxxx":case"xx":return P(r);default:return P(r,":")}},O:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+C(r,":");default:return"GMT"+P(r,":")}},z:function(t,e,n){const r=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+C(r,":");default:return"GMT"+P(r,":")}},t:function(t,e,n){return D(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return D(t.getTime(),e.length)}};function C(t,e=""){const n=t>0?"-":"+",r=Math.abs(t),a=Math.trunc(r/60),o=r%60;return 0===o?n+String(a):n+String(a)+e+D(o,2)}function T(t,e){return t%60==0?(t>0?"-":"+")+D(Math.abs(t)/60,2):P(t,e)}function P(t,e=""){const n=t>0?"-":"+",r=Math.abs(t);return n+D(Math.trunc(r/60),2)+e+D(r%60,2)}const L=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},A=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},E={p:A,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],r=n[1],a=n[2];if(!a)return L(t,e);let o;switch(r){case"P":o=e.dateTime({width:"short"});break;case"PP":o=e.dateTime({width:"medium"});break;case"PPP":o=e.dateTime({width:"long"});break;default:o=e.dateTime({width:"full"})}return o.replace("{{date}}",L(r,e)).replace("{{time}}",A(a,e))}},q=/^D+$/,N=/^Y+$/,O=["D","DD","YY","YYYY"];function W(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=h(t);return!isNaN(Number(n))}const F=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,H=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Y=/^'([^]*?)'?$/,B=/''/g,G=/[a-zA-Z]/;function I(t){const e=t.match(Y);return e?e[1].replace(B,"'"):t}class z{constructor(t,e,n,r){this.name=t,this.color=e,this.rendered=n,this.toDoList=r}render(){this.rendered=!0}}class Q{constructor(t,e,n,r,a){this.title=t,this.description=e,this.dueDate=n,this.priority=r,this.project=a,this.completed=!1}editTask(t,e,n,r,a){this.title=t,this.description=e,this.dueDate=n,this.priority=r,this.project=a}editTitle(t){this.title=t}editDescription(t){this.description=t}editDueDate(t){this.dueDate=t}editPriority(t){this.priority=t}checkCompleted(){this.completed=!this.completed}}function J(t,e){const n=h(t),r=h(e),a=$(n,r),o=Math.abs(f(n,r));n.setDate(n.getDate()-a*o);const i=a*(o-Number($(n,r)===-a));return 0===i?0:i}function $(t,e){const n=t.getFullYear()-e.getFullYear()||t.getMonth()-e.getMonth()||t.getDate()-e.getDate()||t.getHours()-e.getHours()||t.getMinutes()-e.getMinutes()||t.getSeconds()-e.getSeconds()||t.getMilliseconds()-e.getMilliseconds();return n<0?-1:n>0?1:n}class V{constructor(){this.taskArray=new Array}appendTask(t){this.taskArray.push(t)}deleteTask(t){this.taskArray=this.taskArray.filter((e=>e.title!==t))}get list(){return this.taskArray}get length(){return this.taskArray.length}empty(){this.taskArray=[]}getTaskName(){const t=[];return this.taskArray.forEach((e=>{t.push(e.title)})),t}sortByDueDate(){this.taskArray.sort(X)}filterBySeven(){this.taskArray=this.taskArray.filter((t=>{const e=new Date,n=J(t.dueDate,e);return 0<=n&&n<=7}))}filterByToday(){this.taskArray=this.taskArray.filter((t=>{const e=new Date;return 0===J(t.dueDate,e)}))}}function X(t,e){return function(t,e){const n=h(t),r=h(e),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}(t.dueDate,e.dueDate)}class U{static checkStorage(){return 0!==localStorage.length}static getProjects(t){for(let e=0;e<localStorage.length;e++){const n=JSON.parse(localStorage.getItem(localStorage.key(e))),r=new V;for(let t=0;t<n.toDoList.taskArray.length;t++){let e=n.toDoList.taskArray[t];const a=new Q(e.title,e.description,e.dueDate,e.priority,e.project,e.completed);r.appendTask(a)}const a=new z(n.name,n.color,!1,r);t.push(a)}}static setProjectToStorage(t){localStorage.setItem(t.name,JSON.stringify(t))}static setTaskToStorage(t){for(let e=0;e<localStorage.length;e++){let n=JSON.parse(localStorage.getItem(localStorage.key(e)));if(t.project===n.name){const e=new V;for(let t=0;t<n.toDoList.taskArray.length;t++)e.appendTask(n.toDoList.taskArray[t]);e.appendTask(t),n.toDoList=e,localStorage.setItem(n.name,JSON.stringify(n))}}}static deleteProjectFromStorage(t){localStorage.removeItem(t.name)}static deleteTaskFromStorage(t,e){for(let n=0;n<localStorage.length;n++){let r=JSON.parse(localStorage.getItem(localStorage.key(n)));t.project===r.name&&(r.toDoList=e,localStorage.setItem(r.name,JSON.stringify(r)))}}}class R{static projectArray=[];static inboxArray=new V;static init(){R.cacheDOM(),R.bindEventHandler(),R.renderProjects()}static renderProjects(){U.checkStorage()?(U.getProjects(R.projectArray),R.render(),R.showContent(R.projectArray[0].name)):(R.initializeStorage(),R.render(),R.showContent("Inbox"))}static initializeStorage(){const t=new z("Study","black",!1,new V),e=new z("Grocery Shopping","red",!1,new V),n=new Q("JavaScript Course","Finish the JavaScript Course by the end of September",new Date("09-30-2024"),"MEDIUM","Study"),r=new Q("The Odin Project","Finish The Odin Project by the end of the year",new Date("12-31-2024"),"HIGH","Study"),a=new Q("Buy coffee","NEED CAFFEINE",new Date("08-31-2024"),"HIGH","Grocery Shopping"),o=new Q("Buy Oatmeal","Nothing to eat in the morning",new Date("08-30-2024"),"LOW","Grocery Shopping");t.toDoList.appendTask(n),t.toDoList.appendTask(r),e.toDoList.appendTask(a),e.toDoList.appendTask(o),U.setProjectToStorage(t),U.setProjectToStorage(e),R.projectArray.push(t),R.projectArray.push(e)}static cacheDOM(){this.addProjectBtn=document.querySelector("#add-project-btn"),this.addTaskBtn=document.querySelector("#add-task-btn"),this.taskCloseBtn=document.querySelector(".task-dialog-close"),this.projectCloseBtn=document.querySelector("#project-dialog-close"),this.projectDialog=document.querySelector("#add-project-dialog"),this.taskDialog=document.querySelector("#add-task-dialog"),this.projectForm=document.querySelector("#add-project-form"),this.taskForm=document.querySelector("#add-task-form"),this.projectContainer=document.querySelector(".project-container"),this.contentContainer=document.querySelector(".content"),this.inbox=document.querySelector("#inbox"),this.today=document.querySelector("#today"),this.thisWeek=document.querySelector("#week"),this.taskProjectSelector=document.querySelector("#task-project-select")}static bindEventHandler(){this.addProjectBtn.addEventListener("click",R.openProjectModal.bind(this)),this.projectCloseBtn.addEventListener("click",R.closeProjectModal.bind(this)),this.addTaskBtn.addEventListener("click",R.openTaskModal.bind(this)),this.taskCloseBtn.addEventListener("click",R.closeTaskModal.bind(this)),this.projectForm.addEventListener("submit",R.addNewProject.bind(this)),this.taskForm.addEventListener("submit",R.addNewTask.bind(this)),document.addEventListener("click",(function(t){const e=t.target.closest(".project-container-item"),n=t.target.closest(".nav-item-container"),r=t.target.closest(".task-complete-btn"),a=t.target.closest(".task-delete-btn"),o=t.target.closest(".delete-project-btn");if(e&&!t.target.matches(".delete-project-btn")){const t=R.findProject(e);R.showContent(t.name)}else n?R.showContent(n.children[1].textContent):r?R.deleteTask(r):a?R.deleteTask(a):o&&R.deleteProject(o);t.stopPropagation()}))}static openProjectModal(){this.projectDialog.showModal()}static closeProjectModal(){this.projectDialog.close(),this.projectForm.reset()}static openTaskModal(){this.taskDialog.showModal()}static closeTaskModal(){this.taskDialog.close(),this.taskForm.reset()}static render(){R.projectArray.forEach((t=>{if(!t.rendered){const e=t.name,n=t.color;t.render(),R.createProjectDiv(e,n),R.addProjectOption(e)}}))}static addProjectOption(t){const e=document.createElement("option");e.setAttribute("value",t),e.innerText=t,this.taskProjectSelector.appendChild(e)}static deleteProjectOption(t){const e=this.taskProjectSelector.children;for(let n=0;n<e.length;n++)e[n].textContent===t&&e[n].remove()}static createProjectDiv(t,e){const n=document.createElement("div"),r=document.createElement("div"),a=document.createElement("button");r.classList.add("project-name"),r.textContent=t,a.innerHTML='<?xml version="1.0" encoding="iso-8859-1"?>\x3c!-- Generator: Adobe Illustrator 19.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 16 16" width="16px" height="16px"><path style="fill:none;stroke:#000000;stroke-miterlimit:10;" d="M11.5,4v8.5c0,0.552-0.448,1-1,1h-6c-0.552,0-1-0.448-1-1V4"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="5.5" y1="5" x2="5.5" y2="12"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="7.5" y1="5" x2="7.5" y2="12"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="9.5" y1="5" x2="9.5" y2="12"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="2" y1="3.5" x2="13" y2="3.5"/><path style="fill:none;stroke:#000000;stroke-linecap:square;stroke-miterlimit:10;" d="M9.5,3.5V2.497C9.5,1.946,9.054,1.5,8.503,1.5H6.497C5.946,1.5,5.5,1.946,5.5,2.497V3.5"/></svg>',a.classList.add("delete-project-btn"),a.classList.add("hide"),n.classList.add("project-container-item"),n.innerHTML=`<span class="${e}"></span>`,n.appendChild(r),n.appendChild(a),this.projectContainer.appendChild(n),R.cacheDOM,R.bindEventHandler}static addNewProject(t){t.preventDefault();const e=document.querySelector("#project-name").value,n=document.querySelector("#project-color").value;let r;R.projectArray.some((t=>t.name.toLowerCase()===e.toLowerCase()))?alert("Same project name exists"):(r=new z(e,n,!1,new V),R.projectArray.push(r)),this.projectDialog.close(),this.projectForm.reset(),R.render(),R.showContent(e),U.setProjectToStorage(r)}static addNewTask(t){t.preventDefault();const e=document.querySelector("#task-name").value,n=document.querySelector("#task-description").value,r=document.querySelector("#date").value.split("-"),a=new Date(`${r[1]}-${r[2]}-${r[0]}`),o=document.querySelector("#priority").value.toUpperCase(),i=document.querySelector("#task-project-select").value,s=new Q(e,n,a,o,i);"inbox"===i?(R.inboxArray.appendTask(s),R.inboxArray.sortByDueDate(),R.showContent("Inbox")):(R.findProject(i).toDoList.appendTask(s),R.showContent(i)),U.setTaskToStorage(s),this.taskDialog.close(),this.taskForm.reset()}static deleteProject(t){const e=t.parentNode.children[1].textContent,n=this.contentContainer.children[0].textContent,r=R.findProject(e);U.deleteProjectFromStorage(r),R.projectArray=R.projectArray.filter((t=>t.name!==e)),e===n&&R.projectArray.length>0?R.showContent(R.projectArray[0].name):e===n&&0===R.projectArray.length?R.showContent("inbox"):R.showContent(n),t.parentNode.remove(),R.deleteProjectOption(e)}static deleteTask(t){let e=t.parentNode.children[1].textContent,n=this.contentContainer.children[0].textContent,r=t.parentNode.children[4].children[1].textContent;const a=R.findProject(r),o=R.findTask(e,a);a.toDoList.deleteTask(e),U.deleteTaskFromStorage(o,a.toDoList),"Inbox"===n?R.showContent("Inbox"):"Today"===n?R.showContent("Today"):"Next 7 Days"===n?R.showContent("Next 7 days"):R.showContent(r)}static findProject(t){if("string"==typeof t){if("inbox"===t.toLowerCase())return"Inbox";for(let e=0;e<R.projectArray.length;e++)if(t===R.projectArray[e].name)return R.projectArray[e]}const e=t.children[1].textContent;for(let t=0;t<R.projectArray.length;t++)if(e===R.projectArray[t].name)return R.projectArray[t]}static findTask(t,e){for(let n=0;n<e.toDoList.length;n++)if(t===e.toDoList.list[n].title)return e.toDoList.list[n]}static showContent(t){let e;e="string"!=typeof t?t.currentTarget.textContent:t,this.contentContainer.innerHTML="";const n=document.createElement("h1"),r=document.createElement("div"),a=document.createElement("div");let o;r.classList.add("task-number"),n.classList.add("title"),"inbox"===e.toLowerCase()?(o=R.inboxArray,n.textContent="Inbox"):"today"===e.toLowerCase()?(o=R.allTaskArray(),o.filterByToday(),n.textContent="Today"):"next 7 days"===e.toLowerCase()?(n.textContent="Next 7 Days",o=R.allTaskArray(),o.filterBySeven(),o.sortByDueDate()):(n.textContent=e,o=R.findProject(e).toDoList,o.sortByDueDate());const i=o.length;for(let t=0;t<i;t++)a.appendChild(R.createTaskDiv(o.list[t]));r.textContent=i<2?`${i} task`:`${i} tasks`,a.classList.add("task-item-container"),this.contentContainer.appendChild(n),this.contentContainer.appendChild(r),this.contentContainer.appendChild(a)}static createTaskDiv(t){const e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div"),c=document.createElement("span"),l=document.createElement("button"),u=document.createElement("button"),m=document.createElement("button");n.classList.add("task-title"),r.classList.add("task-description"),l.classList.add("task-complete-btn"),u.classList.add("task-delete-btn"),m.classList.add("task-edit-btn"),a.classList.add("task-due-date"),i.classList.add("task-project"),o.classList.add("task-priority");const g=R.findProject(t.project);c.classList.add("task-project"),c.classList.add(`${g.color}`),"HIGH"===t.priority?o.classList.add("task-priority-high"):"MEDIUM"===t.priority?o.classList.add("task-priority-medium"):o.classList.add("task-priority-low"),u.innerHTML='<?xml version="1.0" encoding="iso-8859-1"?>\x3c!-- Generator: Adobe Illustrator 19.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --\x3e<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 16 16" width="16px" height="16px"><path style="fill:none;stroke:#000000;stroke-miterlimit:10;" d="M11.5,4v8.5c0,0.552-0.448,1-1,1h-6c-0.552,0-1-0.448-1-1V4"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="5.5" y1="5" x2="5.5" y2="12"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="7.5" y1="5" x2="7.5" y2="12"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="9.5" y1="5" x2="9.5" y2="12"/><line style="fill:none;stroke:#000000;stroke-miterlimit:10;" x1="2" y1="3.5" x2="13" y2="3.5"/><path style="fill:none;stroke:#000000;stroke-linecap:square;stroke-miterlimit:10;" d="M9.5,3.5V2.497C9.5,1.946,9.054,1.5,8.503,1.5H6.497C5.946,1.5,5.5,1.946,5.5,2.497V3.5"/></svg>',m.textContent="edit",n.textContent=t.title,r.textContent=t.description,a.textContent=function(t,e,n){const r=d(),a=n?.locale??r.locale??s,o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,c=h(t);if(!W(c))throw new RangeError("Invalid time value");let l=e.match(H).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,E[e])(t,a.formatLong):t})).join("").match(F).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:I(t)};if(j[e])return{isToken:!0,value:t};if(e.match(G))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));a.localize.preprocessor&&(l=a.localize.preprocessor(c,l));const u={firstWeekContainsDate:o,weekStartsOn:i,locale:a};return l.map((r=>{if(!r.isToken)return r.value;const o=r.value;return(!n?.useAdditionalWeekYearTokens&&function(t){return N.test(t)}(o)||!n?.useAdditionalDayOfYearTokens&&function(t){return q.test(t)}(o))&&function(t,e,n){const r=function(t,e,n){const r="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(r),O.includes(t))throw new RangeError(r)}(o,e,String(t)),(0,j[o[0]])(c,o,a.localize,u)})).join("")}(t.dueDate,"MMM do',' yyyy"),o.textContent=t.priority,c.style.fontFamily="Fira Sans",i.append(c);const f=document.createElement("span");return f.textContent=t.project,i.append(f),e.classList.add("task-item"),e.appendChild(l),e.appendChild(n),e.appendChild(r),e.appendChild(o),e.appendChild(i),e.appendChild(u),e.appendChild(a),e}static createAddTaskForm(){const t=document.createElement("div"),e=document.createElement("input"),n=document.createElement("textarea");return t.classList.add("task-form-container"),t.innerHTML="<div><input type='text' id='task-name' placeholder='Task name'></div><div><textarea id='task-description' rows='1' placeholder='Description'></textarea></div><div class='task-btn-container'><button>Cancel</button><button type='submit'>Add Task</button></div>",e.setAttribute("name","task-name"),e.setAttribute("id","task-name"),n.setAttribute("id","task-description"),t}static allTaskArray(){const t=new V;for(let e=0;e<R.projectArray.length;e++)for(let n=0;n<R.projectArray[e].toDoList.length;n++)t.appendTask(R.projectArray[e].toDoList.list[n]);return t}static createTaskForm(){const t=document.createElement("form");t.setAttribute("id","add-task-form"),t.innerHTML='<div class="form-input">\n          <label for="task-name">Title</label>\n          <input required type="text" id="task-name" placeholder="Task name" />\n        </div>\n        <div class="form-input">\n          <label for="task-description">Description (Optional)</label>\n          <textarea\n            id="task-description"\n            rows="3"\n            placeholder="Description"\n          ></textarea>\n        </div>\n        <div class="form-input">\n          <label for="date">Due Date</label>\n          <input required type="date" id="date" />\n          <label for="priority">Priority</label>\n          <select required name="priority" id="priority">\n            <option value="" disabled selected>Priority</option>\n            <option value="high">High</option>\n            <option value="medium">Medium</option>\n            <option value="low">Low</option>\n          </select>\n        </div>',this.contentContainer.appendChild(t)}}document.addEventListener("DOMContentLoaded",R.init)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,